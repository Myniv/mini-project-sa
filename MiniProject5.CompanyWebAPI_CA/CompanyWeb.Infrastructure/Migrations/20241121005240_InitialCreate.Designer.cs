// <auto-generated />
using System;
using LMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CompanyWeb.Infrastructure.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20241121005240_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Departement", b =>
                {
                    b.Property<int>("Deptno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("deptno");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Deptno"));

                    b.Property<string>("Deptname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deptname");

                    b.Property<int?>("Mgrempno")
                        .HasColumnType("integer")
                        .HasColumnName("mgrempno");

                    b.HasKey("Deptno");

                    b.HasIndex(new[] { "Mgrempno" }, "departements_mgrempno_key")
                        .IsUnique();

                    b.ToTable("departements");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.DepartementLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("locationid");

                    b.Property<int>("Deptno")
                        .HasColumnType("integer")
                        .HasColumnName("deptno");

                    b.HasKey("LocationId", "Deptno");

                    b.HasIndex("Deptno");

                    b.ToTable("departementlocations");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Empno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("empno");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Empno"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("DeactivateReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deactivatereason");

                    b.Property<int?>("Deptno")
                        .HasColumnType("integer")
                        .HasColumnName("deptno");

                    b.Property<int?>("DirectSupervisor")
                        .HasColumnType("integer")
                        .HasColumnName("directsupervisor");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<int>("EmpLevel")
                        .HasColumnType("integer")
                        .HasColumnName("emplevel");

                    b.Property<string>("EmpType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emptype");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lname");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("position");

                    b.Property<int>("Salary")
                        .HasColumnType("integer")
                        .HasColumnName("salary");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sex");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ssn");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.HasKey("Empno");

                    b.HasIndex("Deptno");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.EmployeeDependent", b =>
                {
                    b.Property<int>("EmpDependentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("empdependentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmpDependentId"));

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<int>("DependentEmpno")
                        .HasColumnType("integer")
                        .HasColumnName("dependentempno");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fname");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lname");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("relation");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sex");

                    b.HasKey("EmpDependentId");

                    b.ToTable("employeedependents");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("locationid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("locationname");

                    b.HasKey("LocationId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Project", b =>
                {
                    b.Property<int>("Projno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("projno");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Projno"));

                    b.Property<int>("Deptno")
                        .HasColumnType("integer")
                        .HasColumnName("deptno");

                    b.Property<int>("ProjLocation")
                        .HasColumnType("integer")
                        .HasColumnName("projlocation");

                    b.Property<string>("Projname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("projname");

                    b.HasKey("Projno");

                    b.HasIndex("Deptno");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Workson", b =>
                {
                    b.Property<int>("Empno")
                        .HasColumnType("integer")
                        .HasColumnName("empno");

                    b.Property<int>("Projno")
                        .HasColumnType("integer")
                        .HasColumnName("projno");

                    b.Property<DateOnly>("Dateworked")
                        .HasColumnType("date")
                        .HasColumnName("dateworked");

                    b.Property<int>("Hoursworked")
                        .HasColumnType("integer")
                        .HasColumnName("hoursworked");

                    b.HasKey("Empno", "Projno");

                    b.HasIndex("Projno");

                    b.ToTable("worksons");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Departement", b =>
                {
                    b.HasOne("CompanyWeb.Domain.Models.Entities.Employee", "MgrempnoNavigation")
                        .WithOne("Departement")
                        .HasForeignKey("CompanyWeb.Domain.Models.Entities.Departement", "Mgrempno");

                    b.Navigation("MgrempnoNavigation");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.DepartementLocation", b =>
                {
                    b.HasOne("CompanyWeb.Domain.Models.Entities.Departement", "DeptnoNavigation")
                        .WithMany("DepartementLocation")
                        .HasForeignKey("Deptno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyWeb.Domain.Models.Entities.Location", "LocationIdNavigation")
                        .WithMany("DepartementLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeptnoNavigation");

                    b.Navigation("LocationIdNavigation");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Employee", b =>
                {
                    b.HasOne("CompanyWeb.Domain.Models.Entities.Departement", "DeptnoNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("Deptno");

                    b.Navigation("DeptnoNavigation");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Project", b =>
                {
                    b.HasOne("CompanyWeb.Domain.Models.Entities.Departement", "DeptnoNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("Deptno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeptnoNavigation");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Workson", b =>
                {
                    b.HasOne("CompanyWeb.Domain.Models.Entities.Employee", "EmpnoNavigation")
                        .WithMany("Worksons")
                        .HasForeignKey("Empno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyWeb.Domain.Models.Entities.Project", "ProjnoNavigation")
                        .WithMany("Worksons")
                        .HasForeignKey("Projno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpnoNavigation");

                    b.Navigation("ProjnoNavigation");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Departement", b =>
                {
                    b.Navigation("DepartementLocation");

                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Employee", b =>
                {
                    b.Navigation("Departement");

                    b.Navigation("Worksons");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Location", b =>
                {
                    b.Navigation("DepartementLocation");
                });

            modelBuilder.Entity("CompanyWeb.Domain.Models.Entities.Project", b =>
                {
                    b.Navigation("Worksons");
                });
#pragma warning restore 612, 618
        }
    }
}
